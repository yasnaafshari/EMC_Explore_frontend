{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/adryan/Code/EMCExplore/EMC_Explore_frontend/node_modules/.pnpm/%40mui%2Bx-data-grid%407.27.0_%40emotion%2Breact%4011.14.0_%40types%2Breact%4019.0.10_react%4019.0.0__%40emot_0a137e96c821fabf96a335fb5438a83e/node_modules/%40mui/x-data-grid/DataGrid/useDataGridProps.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useThemeProps } from '@mui/material/styles';\nimport { GRID_DEFAULT_LOCALE_TEXT } from \"../constants/index.js\";\nimport { DATA_GRID_DEFAULT_SLOTS_COMPONENTS } from \"../constants/defaultGridSlotsComponents.js\";\nimport { computeSlots, useProps } from \"../internals/utils/index.js\";\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from \"../constants/dataGridPropsDefaultValues.js\";\nconst DATA_GRID_FORCED_PROPS = {\n  disableMultipleColumnsFiltering: true,\n  disableMultipleColumnsSorting: true,\n  throttleRowsMs: undefined,\n  hideFooterRowCount: false,\n  pagination: true,\n  checkboxSelectionVisibleOnly: false,\n  disableColumnReorder: true,\n  keepColumnPositionIfDraggedOutside: false,\n  signature: 'DataGrid',\n  unstable_listView: false\n};\nconst defaultSlots = DATA_GRID_DEFAULT_SLOTS_COMPONENTS;\nexport const useDataGridProps = inProps => {\n  const themedProps = useProps(\n  // eslint-disable-next-line material-ui/mui-name-matches-component-name\n  useThemeProps({\n    props: inProps,\n    name: 'MuiDataGrid'\n  }));\n  const localeText = React.useMemo(() => _extends({}, GRID_DEFAULT_LOCALE_TEXT, themedProps.localeText), [themedProps.localeText]);\n  const slots = React.useMemo(() => computeSlots({\n    defaultSlots,\n    slots: themedProps.slots\n  }), [themedProps.slots]);\n  const injectDefaultProps = React.useMemo(() => {\n    return Object.keys(DATA_GRID_PROPS_DEFAULT_VALUES).reduce((acc, key) => {\n      // @ts-ignore\n      acc[key] = themedProps[key] ?? DATA_GRID_PROPS_DEFAULT_VALUES[key];\n      return acc;\n    }, {});\n  }, [themedProps]);\n  return React.useMemo(() => _extends({}, themedProps, injectDefaultProps, {\n    localeText,\n    slots\n  }, DATA_GRID_FORCED_PROPS), [themedProps, localeText, slots, injectDefaultProps]);\n};"],"names":[],"mappings":";;;AAAA;AACA;AAGA;AACA;AAHA;AACA;AAEA;AACA;;;;;;;;AACA,MAAM,yBAAyB;IAC7B,iCAAiC;IACjC,+BAA+B;IAC/B,gBAAgB;IAChB,oBAAoB;IACpB,YAAY;IACZ,8BAA8B;IAC9B,sBAAsB;IACtB,oCAAoC;IACpC,WAAW;IACX,mBAAmB;AACrB;AACA,MAAM,eAAe,4YAAA,CAAA,qCAAkC;AAChD,MAAM,mBAAmB,CAAA;IAC9B,MAAM,cAAc,CAAA,GAAA,mYAAA,CAAA,WAAQ,AAAD,EAC3B,uEAAuE;IACvE,CAAA,GAAA,4ZAAA,CAAA,gBAAa,AAAD,EAAE;QACZ,OAAO;QACP,MAAM;IACR;IACA,MAAM,aAAa,6RAAM,OAAO;gDAAC,IAAM,CAAA,GAAA,kOAAA,CAAA,UAAQ,AAAD,EAAE,CAAC,GAAG,qYAAA,CAAA,2BAAwB,EAAE,YAAY,UAAU;+CAAG;QAAC,YAAY,UAAU;KAAC;IAC/H,MAAM,QAAQ,6RAAM,OAAO;2CAAC,IAAM,CAAA,GAAA,uYAAA,CAAA,eAAY,AAAD,EAAE;gBAC7C;gBACA,OAAO,YAAY,KAAK;YAC1B;0CAAI;QAAC,YAAY,KAAK;KAAC;IACvB,MAAM,qBAAqB,6RAAM,OAAO;wDAAC;YACvC,OAAO,OAAO,IAAI,CAAC,4YAAA,CAAA,iCAA8B,EAAE,MAAM;gEAAC,CAAC,KAAK;oBAC9D,aAAa;oBACb,GAAG,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,IAAI,4YAAA,CAAA,iCAA8B,CAAC,IAAI;oBAClE,OAAO;gBACT;+DAAG,CAAC;QACN;uDAAG;QAAC;KAAY;IAChB,OAAO,6RAAM,OAAO;oCAAC,IAAM,CAAA,GAAA,kOAAA,CAAA,UAAQ,AAAD,EAAE,CAAC,GAAG,aAAa,oBAAoB;gBACvE;gBACA;YACF,GAAG;mCAAyB;QAAC;QAAa;QAAY;QAAO;KAAmB;AAClF","ignoreList":[0]}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///Users/adryan/Code/EMCExplore/EMC_Explore_frontend/node_modules/.pnpm/%40mui%2Bx-data-grid%407.27.0_%40emotion%2Breact%4011.14.0_%40types%2Breact%4019.0.10_react%4019.0.0__%40emot_0a137e96c821fabf96a335fb5438a83e/node_modules/%40mui/x-data-grid/DataGrid/useDataGridComponent.js"],"sourcesContent":["import { useGridInitialization } from \"../hooks/core/useGridInitialization.js\";\nimport { useGridInitializeState } from \"../hooks/utils/useGridInitializeState.js\";\nimport { useGridClipboard } from \"../hooks/features/clipboard/useGridClipboard.js\";\nimport { columnMenuStateInitializer, useGridColumnMenu } from \"../hooks/features/columnMenu/useGridColumnMenu.js\";\nimport { useGridColumns, columnsStateInitializer } from \"../hooks/features/columns/useGridColumns.js\";\nimport { densityStateInitializer, useGridDensity } from \"../hooks/features/density/useGridDensity.js\";\nimport { useGridCsvExport } from \"../hooks/features/export/useGridCsvExport.js\";\nimport { useGridPrintExport } from \"../hooks/features/export/useGridPrintExport.js\";\nimport { useGridFilter, filterStateInitializer } from \"../hooks/features/filter/useGridFilter.js\";\nimport { focusStateInitializer, useGridFocus } from \"../hooks/features/focus/useGridFocus.js\";\nimport { useGridKeyboardNavigation } from \"../hooks/features/keyboardNavigation/useGridKeyboardNavigation.js\";\nimport { useGridPagination, paginationStateInitializer } from \"../hooks/features/pagination/useGridPagination.js\";\nimport { useGridPreferencesPanel, preferencePanelStateInitializer } from \"../hooks/features/preferencesPanel/useGridPreferencesPanel.js\";\nimport { useGridEditing, editingStateInitializer } from \"../hooks/features/editing/useGridEditing.js\";\nimport { useGridRows, rowsStateInitializer } from \"../hooks/features/rows/useGridRows.js\";\nimport { useGridRowsPreProcessors } from \"../hooks/features/rows/useGridRowsPreProcessors.js\";\nimport { useGridParamsApi } from \"../hooks/features/rows/useGridParamsApi.js\";\nimport { rowSelectionStateInitializer, useGridRowSelection } from \"../hooks/features/rowSelection/useGridRowSelection.js\";\nimport { useGridRowSelectionPreProcessors } from \"../hooks/features/rowSelection/useGridRowSelectionPreProcessors.js\";\nimport { useGridSorting, sortingStateInitializer } from \"../hooks/features/sorting/useGridSorting.js\";\nimport { useGridScroll } from \"../hooks/features/scroll/useGridScroll.js\";\nimport { useGridEvents } from \"../hooks/features/events/useGridEvents.js\";\nimport { dimensionsStateInitializer, useGridDimensions } from \"../hooks/features/dimensions/useGridDimensions.js\";\nimport { rowsMetaStateInitializer, useGridRowsMeta } from \"../hooks/features/rows/useGridRowsMeta.js\";\nimport { useGridStatePersistence } from \"../hooks/features/statePersistence/useGridStatePersistence.js\";\nimport { useGridColumnSpanning } from \"../hooks/features/columns/useGridColumnSpanning.js\";\nimport { useGridColumnGrouping, columnGroupsStateInitializer } from \"../hooks/features/columnGrouping/useGridColumnGrouping.js\";\nimport { useGridVirtualization, virtualizationStateInitializer } from \"../hooks/features/virtualization/index.js\";\nimport { columnResizeStateInitializer, useGridColumnResize } from \"../hooks/features/columnResize/useGridColumnResize.js\";\nimport { rowSpanningStateInitializer, useGridRowSpanning } from \"../hooks/features/rows/useGridRowSpanning.js\";\nimport { listViewStateInitializer, useGridListView } from \"../hooks/features/listView/useGridListView.js\";\nexport const useDataGridComponent = (inputApiRef, props) => {\n  const apiRef = useGridInitialization(inputApiRef, props);\n\n  /**\n   * Register all pre-processors called during state initialization here.\n   */\n  useGridRowSelectionPreProcessors(apiRef, props);\n  useGridRowsPreProcessors(apiRef);\n\n  /**\n   * Register all state initializers here.\n   */\n  useGridInitializeState(rowSelectionStateInitializer, apiRef, props);\n  useGridInitializeState(columnsStateInitializer, apiRef, props);\n  useGridInitializeState(rowsStateInitializer, apiRef, props);\n  useGridInitializeState(paginationStateInitializer, apiRef, props);\n  useGridInitializeState(editingStateInitializer, apiRef, props);\n  useGridInitializeState(focusStateInitializer, apiRef, props);\n  useGridInitializeState(sortingStateInitializer, apiRef, props);\n  useGridInitializeState(preferencePanelStateInitializer, apiRef, props);\n  useGridInitializeState(filterStateInitializer, apiRef, props);\n  useGridInitializeState(rowSpanningStateInitializer, apiRef, props);\n  useGridInitializeState(densityStateInitializer, apiRef, props);\n  useGridInitializeState(columnResizeStateInitializer, apiRef, props);\n  useGridInitializeState(columnMenuStateInitializer, apiRef, props);\n  useGridInitializeState(columnGroupsStateInitializer, apiRef, props);\n  useGridInitializeState(virtualizationStateInitializer, apiRef, props);\n  useGridInitializeState(dimensionsStateInitializer, apiRef, props);\n  useGridInitializeState(rowsMetaStateInitializer, apiRef, props);\n  useGridInitializeState(listViewStateInitializer, apiRef, props);\n  useGridKeyboardNavigation(apiRef, props);\n  useGridRowSelection(apiRef, props);\n  useGridColumns(apiRef, props);\n  useGridRows(apiRef, props);\n  useGridRowSpanning(apiRef, props);\n  useGridParamsApi(apiRef, props);\n  useGridColumnSpanning(apiRef);\n  useGridColumnGrouping(apiRef, props);\n  useGridEditing(apiRef, props);\n  useGridFocus(apiRef, props);\n  useGridPreferencesPanel(apiRef, props);\n  useGridFilter(apiRef, props);\n  useGridSorting(apiRef, props);\n  useGridDensity(apiRef, props);\n  useGridColumnResize(apiRef, props);\n  useGridPagination(apiRef, props);\n  useGridRowsMeta(apiRef, props);\n  useGridScroll(apiRef, props);\n  useGridColumnMenu(apiRef);\n  useGridCsvExport(apiRef, props);\n  useGridPrintExport(apiRef, props);\n  useGridClipboard(apiRef, props);\n  useGridDimensions(apiRef, props);\n  useGridEvents(apiRef, props);\n  useGridStatePersistence(apiRef);\n  useGridVirtualization(apiRef, props);\n  useGridListView(apiRef, props);\n  return apiRef;\n};"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":["file:///Users/adryan/Code/EMCExplore/EMC_Explore_frontend/node_modules/.pnpm/%40mui%2Bx-data-grid%407.27.0_%40emotion%2Breact%4011.14.0_%40types%2Breact%4019.0.10_react%4019.0.0__%40emot_0a137e96c821fabf96a335fb5438a83e/node_modules/%40mui/x-data-grid/DataGrid/DataGrid.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { forwardRef } from '@mui/x-internals/forwardRef';\nimport { GridRoot } from \"../components/index.js\";\nimport { useGridAriaAttributes } from \"../hooks/utils/useGridAriaAttributes.js\";\nimport { useGridRowAriaAttributes } from \"../hooks/features/rows/useGridRowAriaAttributes.js\";\nimport { GridContextProvider } from \"../context/GridContextProvider.js\";\nimport { useDataGridComponent } from \"./useDataGridComponent.js\";\nimport { useDataGridProps } from \"./useDataGridProps.js\";\nimport { propValidatorsDataGrid, validateProps } from \"../internals/utils/propValidation.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst configuration = {\n  hooks: {\n    useGridAriaAttributes,\n    useGridRowAriaAttributes\n  }\n};\nconst DataGridRaw = forwardRef(function DataGrid(inProps, ref) {\n  const props = useDataGridProps(inProps);\n  const privateApiRef = useDataGridComponent(props.apiRef, props);\n  if (process.env.NODE_ENV !== 'production') {\n    validateProps(props, propValidatorsDataGrid);\n  }\n  return /*#__PURE__*/_jsx(GridContextProvider, {\n    privateApiRef: privateApiRef,\n    configuration: configuration,\n    props: props,\n    children: /*#__PURE__*/_jsx(GridRoot, _extends({\n      className: props.className,\n      style: props.style,\n      sx: props.sx\n    }, props.forwardedProps, props.slotProps?.root, {\n      ref: ref\n    }))\n  });\n});\n/**\n * Demos:\n * - [DataGrid](https://mui.com/x/react-data-grid/demo/)\n *\n * API:\n * - [DataGrid API](https://mui.com/x/api/data-grid/data-grid/)\n */\nexport const DataGrid = /*#__PURE__*/React.memo(DataGridRaw);\nDataGridRaw.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The ref object that allows Data Grid manipulation. Can be instantiated with `useGridApiRef()`.\n   */\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }),\n  /**\n   * The label of the Data Grid.\n   */\n  'aria-label': PropTypes.string,\n  /**\n   * The id of the element containing a label for the Data Grid.\n   */\n  'aria-labelledby': PropTypes.string,\n  /**\n   * If `true`, the Data Grid height is dynamic and follows the number of rows in the Data Grid.\n   * @default false\n   * @deprecated Use flex parent container instead: https://mui.com/x/react-data-grid/layout/#flex-parent-container\n   * @example\n   * <div style={{ display: 'flex', flexDirection: 'column' }}>\n   *   <DataGrid />\n   * </div>\n   */\n  autoHeight: PropTypes.bool,\n  /**\n   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.\n   * @default false\n   */\n  autoPageSize: PropTypes.bool,\n  /**\n   * If `true`, columns are autosized after the datagrid is mounted.\n   * @default false\n   */\n  autosizeOnMount: PropTypes.bool,\n  /**\n   * The options for autosize when user-initiated.\n   */\n  autosizeOptions: PropTypes.shape({\n    columns: PropTypes.arrayOf(PropTypes.string),\n    disableColumnVirtualization: PropTypes.bool,\n    expand: PropTypes.bool,\n    includeHeaders: PropTypes.bool,\n    includeOutliers: PropTypes.bool,\n    outliersFactor: PropTypes.number\n  }),\n  /**\n   * Controls the modes of the cells.\n   */\n  cellModesModel: PropTypes.object,\n  /**\n   * If `true`, the Data Grid will display an extra column with checkboxes for selecting rows.\n   * @default false\n   */\n  checkboxSelection: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * The character used to separate cell values when copying to the clipboard.\n   * @default '\\t'\n   */\n  clipboardCopyCellDelimiter: PropTypes.string,\n  /**\n   * Column region in pixels to render before/after the viewport\n   * @default 150\n   */\n  columnBufferPx: PropTypes.number,\n  /**\n   * Sets the height in pixels of the column group headers in the Data Grid.\n   * Inherits the `columnHeaderHeight` value if not set.\n   */\n  columnGroupHeaderHeight: PropTypes.number,\n  columnGroupingModel: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * Sets the height in pixel of the column headers in the Data Grid.\n   * @default 56\n   */\n  columnHeaderHeight: PropTypes.number,\n  /**\n   * Set of columns of type [[GridColDef]][].\n   */\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  /**\n   * Set the column visibility model of the Data Grid.\n   * If defined, the Data Grid will ignore the `hide` property in [[GridColDef]].\n   */\n  columnVisibilityModel: PropTypes.object,\n  /**\n   * Set the density of the Data Grid.\n   * @default \"standard\"\n   */\n  density: PropTypes.oneOf(['comfortable', 'compact', 'standard']),\n  /**\n   * If `true`, column autosizing on header separator double-click is disabled.\n   * @default false\n   */\n  disableAutosize: PropTypes.bool,\n  /**\n   * If `true`, column filters are disabled.\n   * @default false\n   */\n  disableColumnFilter: PropTypes.bool,\n  /**\n   * If `true`, the column menu is disabled.\n   * @default false\n   */\n  disableColumnMenu: PropTypes.bool,\n  /**\n   * If `true`, resizing columns is disabled.\n   * @default false\n   */\n  disableColumnResize: PropTypes.bool,\n  /**\n   * If `true`, hiding/showing columns is disabled.\n   * @default false\n   */\n  disableColumnSelector: PropTypes.bool,\n  /**\n   * If `true`, the column sorting feature will be disabled.\n   * @default false\n   */\n  disableColumnSorting: PropTypes.bool,\n  /**\n   * If `true`, the density selector is disabled.\n   * @default false\n   */\n  disableDensitySelector: PropTypes.bool,\n  /**\n   * If `true`, `eval()` is not used for performance optimization.\n   * @default false\n   */\n  disableEval: PropTypes.bool,\n  /**\n   * If `true`, multiple selection using the Ctrl/CMD or Shift key is disabled.\n   * The MIT DataGrid will ignore this prop, unless `checkboxSelection` is enabled.\n   * @default false (`!props.checkboxSelection` for MIT Data Grid)\n   */\n  disableMultipleRowSelection: PropTypes.bool,\n  /**\n   * If `true`, the selection on click on a row or cell is disabled.\n   * @default false\n   */\n  disableRowSelectionOnClick: PropTypes.bool,\n  /**\n   * If `true`, the virtualization is disabled.\n   * @default false\n   */\n  disableVirtualization: PropTypes.bool,\n  /**\n   * Controls whether to use the cell or row editing.\n   * @default \"cell\"\n   */\n  editMode: PropTypes.oneOf(['cell', 'row']),\n  /**\n   * Use if the actual rowCount is not known upfront, but an estimation is available.\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\n   * Applicable only with `paginationMode=\"server\"` and when `rowCount=\"-1\"`\n   */\n  estimatedRowCount: PropTypes.number,\n  /**\n   * Unstable features, breaking changes might be introduced.\n   * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.\n   */\n  experimentalFeatures: PropTypes.shape({\n    warnIfFocusStateIsNotSynced: PropTypes.bool\n  }),\n  /**\n   * The milliseconds delay to wait after a keystroke before triggering filtering.\n   * @default 150\n   */\n  filterDebounceMs: PropTypes.number,\n  /**\n   * Filtering can be processed on the server or client-side.\n   * Set it to 'server' if you would like to handle filtering on the server-side.\n   * @default \"client\"\n   */\n  filterMode: PropTypes.oneOf(['client', 'server']),\n  /**\n   * Set the filter model of the Data Grid.\n   */\n  filterModel: PropTypes.shape({\n    items: PropTypes.arrayOf(PropTypes.shape({\n      field: PropTypes.string.isRequired,\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      operator: PropTypes.string.isRequired,\n      value: PropTypes.any\n    })).isRequired,\n    logicOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterExcludeHiddenColumns: PropTypes.bool,\n    quickFilterLogicOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterValues: PropTypes.array\n  }),\n  /**\n   * Forwarded props for the Data Grid root element.\n   * @ignore - do not document.\n   */\n  forwardedProps: PropTypes.object,\n  /**\n   * Function that applies CSS classes dynamically on cells.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {string} The CSS class to apply to the cell.\n   */\n  getCellClassName: PropTypes.func,\n  /**\n   * Function that returns the element to render in row detail.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {React.JSX.Element} The row detail element.\n   */\n  getDetailPanelContent: PropTypes.func,\n  /**\n   * Function that returns the estimated height for a row.\n   * Only works if dynamic row height is used.\n   * Once the row height is measured this value is discarded.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.\n   */\n  getEstimatedRowHeight: PropTypes.func,\n  /**\n   * Function that applies CSS classes dynamically on rows.\n   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].\n   * @returns {string} The CSS class to apply to the row.\n   */\n  getRowClassName: PropTypes.func,\n  /**\n   * Function that sets the row height per row.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If \"auto\" then the row height is calculated based on the content.\n   */\n  getRowHeight: PropTypes.func,\n  /**\n   * Return the id of a given [[GridRowModel]].\n   */\n  getRowId: PropTypes.func,\n  /**\n   * Function that allows to specify the spacing between rows.\n   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].\n   * @returns {GridRowSpacing} The row spacing values.\n   */\n  getRowSpacing: PropTypes.func,\n  /**\n   * If `true`, the footer component is hidden.\n   * @default false\n   */\n  hideFooter: PropTypes.bool,\n  /**\n   * If `true`, the pagination component in the footer is hidden.\n   * @default false\n   */\n  hideFooterPagination: PropTypes.bool,\n  /**\n   * If `true`, the selected row count in the footer is hidden.\n   * @default false\n   */\n  hideFooterSelectedRowCount: PropTypes.bool,\n  /**\n   * If `true`, the diacritics (accents) are ignored when filtering or quick filtering.\n   * E.g. when filter value is `cafe`, the rows with `café` will be visible.\n   * @default false\n   */\n  ignoreDiacritics: PropTypes.bool,\n  /**\n   * If `true`, the Data Grid will not use `valueFormatter` when exporting to CSV or copying to clipboard.\n   * If an object is provided, you can choose to ignore the `valueFormatter` for CSV export or clipboard export.\n   * @default false\n   */\n  ignoreValueFormatterDuringExport: PropTypes.oneOfType([PropTypes.shape({\n    clipboardExport: PropTypes.bool,\n    csvExport: PropTypes.bool\n  }), PropTypes.bool]),\n  /**\n   * If `select`, a group header checkbox in indeterminate state (like \"Select All\" checkbox)\n   * will select all the rows under it.\n   * If `deselect`, it will deselect all the rows under it.\n   * Works only if `checkboxSelection` is enabled.\n   * @default \"deselect\"\n   * @deprecated `select` will be the default behavior from v8 onwards\n   */\n  indeterminateCheckboxAction: PropTypes.oneOf(['deselect', 'select']),\n  /**\n   * The initial state of the DataGrid.\n   * The data in it will be set in the state on initialization but will not be controlled.\n   * If one of the data in `initialState` is also being controlled, then the control state wins.\n   */\n  initialState: PropTypes.object,\n  /**\n   * Callback fired when a cell is rendered, returns true if the cell is editable.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {boolean} A boolean indicating if the cell is editable.\n   */\n  isCellEditable: PropTypes.func,\n  /**\n   * Determines if a row can be selected.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {boolean} A boolean indicating if the row is selectable.\n   */\n  isRowSelectable: PropTypes.func,\n  /**\n   * If `true`, the selection model will retain selected rows that do not exist.\n   * Useful when using server side pagination and row selections need to be retained\n   * when changing pages.\n   * @default false\n   */\n  keepNonExistentRowsSelected: PropTypes.bool,\n  /**\n   * If `true`, a loading overlay is displayed.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Set the locale text of the Data Grid.\n   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Pass a custom logger in the components that implements the [[Logger]] interface.\n   * @default console\n   */\n  logger: PropTypes.shape({\n    debug: PropTypes.func.isRequired,\n    error: PropTypes.func.isRequired,\n    info: PropTypes.func.isRequired,\n    warn: PropTypes.func.isRequired\n  }),\n  /**\n   * Allows to pass the logging level or false to turn off logging.\n   * @default \"error\" (\"warn\" in dev mode)\n   */\n  logLevel: PropTypes.oneOf(['debug', 'error', 'info', 'warn', false]),\n  /**\n   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).\n   */\n  nonce: PropTypes.string,\n  /**\n   * Callback fired when any cell is clicked.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellClick: PropTypes.func,\n  /**\n   * Callback fired when a double click event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellDoubleClick: PropTypes.func,\n  /**\n   * Callback fired when the cell turns to edit mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStart: PropTypes.func,\n  /**\n   * Callback fired when the cell turns to view mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStop: PropTypes.func,\n  /**\n   * Callback fired when a keydown event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellKeyDown: PropTypes.func,\n  /**\n   * Callback fired when the `cellModesModel` prop changes.\n   * @param {GridCellModesModel} cellModesModel Object containing which cells are in \"edit\" mode.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellModesModelChange: PropTypes.func,\n  /**\n   * Callback called when the data is copied to the clipboard.\n   * @param {string} data The data copied to the clipboard.\n   */\n  onClipboardCopy: PropTypes.func,\n  /**\n   * Callback fired when a click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderClick: PropTypes.func,\n  /**\n   * Callback fired when a contextmenu event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   */\n  onColumnHeaderContextMenu: PropTypes.func,\n  /**\n   * Callback fired when a double click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderDoubleClick: PropTypes.func,\n  /**\n   * Callback fired when a mouse enter event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderEnter: PropTypes.func,\n  /**\n   * Callback fired when a mouse leave event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderLeave: PropTypes.func,\n  /**\n   * Callback fired when a mouseout event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOut: PropTypes.func,\n  /**\n   * Callback fired when a mouseover event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOver: PropTypes.func,\n  /**\n   * Callback fired when a column is reordered.\n   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnOrderChange: PropTypes.func,\n  /**\n   * Callback fired while a column is being resized.\n   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnResize: PropTypes.func,\n  /**\n   * Callback fired when the column visibility model changes.\n   * @param {GridColumnVisibilityModel} model The new model.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnVisibilityModelChange: PropTypes.func,\n  /**\n   * Callback fired when the width of a column is changed.\n   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnWidthChange: PropTypes.func,\n  /**\n   * Callback fired when the density changes.\n   * @param {GridDensity} density New density value.\n   */\n  onDensityChange: PropTypes.func,\n  /**\n   * Callback fired when the Filter model changes before the filters are applied.\n   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onFilterModelChange: PropTypes.func,\n  /**\n   * Callback fired when the menu is closed.\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onMenuClose: PropTypes.func,\n  /**\n   * Callback fired when the menu is opened.\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onMenuOpen: PropTypes.func,\n  /**\n   * Callback fired when the pagination meta has changed.\n   * @param {GridPaginationMeta} paginationMeta Updated pagination meta.\n   */\n  onPaginationMetaChange: PropTypes.func,\n  /**\n   * Callback fired when the pagination model has changed.\n   * @param {GridPaginationModel} model Updated pagination model.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPaginationModelChange: PropTypes.func,\n  /**\n   * Callback fired when the preferences panel is closed.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelClose: PropTypes.func,\n  /**\n   * Callback fired when the preferences panel is opened.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelOpen: PropTypes.func,\n  /**\n   * Callback called when `processRowUpdate` throws an error or rejects.\n   * @param {any} error The error thrown.\n   */\n  onProcessRowUpdateError: PropTypes.func,\n  /**\n   * Callback fired when the Data Grid is resized.\n   * @param {ElementSize} containerSize With all properties from [[ElementSize]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onResize: PropTypes.func,\n  /**\n   * Callback fired when a row is clicked.\n   * Not called if the target clicked is an interactive element added by the built-in columns.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowClick: PropTypes.func,\n  /**\n   * Callback fired when the row count has changed.\n   * @param {number} count Updated row count.\n   */\n  onRowCountChange: PropTypes.func,\n  /**\n   * Callback fired when a double click event comes from a row container element.\n   * @param {GridRowParams} params With all properties from [[RowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowDoubleClick: PropTypes.func,\n  /**\n   * Callback fired when the row turns to edit mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStart: PropTypes.func,\n  /**\n   * Callback fired when the row turns to view mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStop: PropTypes.func,\n  /**\n   * Callback fired when the `rowModesModel` prop changes.\n   * @param {GridRowModesModel} rowModesModel Object containing which rows are in \"edit\" mode.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowModesModelChange: PropTypes.func,\n  /**\n   * Callback fired when the selection state of one or multiple rows changes.\n   * @param {GridRowSelectionModel} rowSelectionModel With all the row ids [[GridSelectionModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowSelectionModelChange: PropTypes.func,\n  /**\n   * Callback fired when the sort model changes before a column is sorted.\n   * @param {GridSortModel} model With all properties from [[GridSortModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onSortModelChange: PropTypes.func,\n  /**\n   * Callback fired when the state of the Data Grid is updated.\n   * @param {GridState} state The new state.\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @ignore - do not document.\n   */\n  onStateChange: PropTypes.func,\n  /**\n   * Select the pageSize dynamically using the component UI.\n   * @default [25, 50, 100]\n   */\n  pageSizeOptions: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired\n  })]).isRequired),\n  pagination: PropTypes.oneOf([true]),\n  /**\n   * The extra information about the pagination state of the Data Grid.\n   * Only applicable with `paginationMode=\"server\"`.\n   */\n  paginationMeta: PropTypes.shape({\n    hasNextPage: PropTypes.bool\n  }),\n  /**\n   * Pagination can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle the pagination on the client-side.\n   * Set it to 'server' if you would like to handle the pagination on the server-side.\n   * @default \"client\"\n   */\n  paginationMode: PropTypes.oneOf(['client', 'server']),\n  /**\n   * The pagination model of type [[GridPaginationModel]] which refers to current `page` and `pageSize`.\n   */\n  paginationModel: PropTypes.shape({\n    page: PropTypes.number.isRequired,\n    pageSize: PropTypes.number.isRequired\n  }),\n  /**\n   * Callback called before updating a row with new values in the row and cell editing.\n   * @template R\n   * @param {R} newRow Row object with the new values.\n   * @param {R} oldRow Row object with the old values.\n   * @param {{ rowId: GridRowId }} params Additional parameters.\n   * @returns {Promise<R> | R} The final values to update the row.\n   */\n  processRowUpdate: PropTypes.func,\n  /**\n   * If `true`, the page is set to 0 after each sorting or filtering.\n   * This prop will be removed in the next major version and resetting the page will become the default behavior.\n   * @default false\n   */\n  resetPageOnSortFilter: PropTypes.bool,\n  /**\n   * The milliseconds throttle delay for resizing the grid.\n   * @default 60\n   */\n  resizeThrottleMs: PropTypes.number,\n  /**\n   * Row region in pixels to render before/after the viewport\n   * @default 150\n   */\n  rowBufferPx: PropTypes.number,\n  /**\n   * Set the total number of rows, if it is different from the length of the value `rows` prop.\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\n   * Only works with `paginationMode=\"server\"`, ignored when `paginationMode=\"client\"`.\n   */\n  rowCount: PropTypes.number,\n  /**\n   * Sets the height in pixel of a row in the Data Grid.\n   * @default 52\n   */\n  rowHeight: PropTypes.number,\n  /**\n   * Controls the modes of the rows.\n   */\n  rowModesModel: PropTypes.object,\n  /**\n   * The milliseconds delay to wait after measuring the row height before recalculating row positions.\n   * Setting it to a lower value could be useful when using dynamic row height,\n   * but might reduce performance when displaying a large number of rows.\n   * @default 166\n   * @deprecated\n   */\n  rowPositionsDebounceMs: PropTypes.number,\n  /**\n   * Set of rows of type [[GridRowsProp]].\n   * @default []\n   */\n  rows: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * If `false`, the row selection mode is disabled.\n   * @default true\n   */\n  rowSelection: PropTypes.bool,\n  /**\n   * Sets the row selection model of the Data Grid.\n   */\n  rowSelectionModel: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired), PropTypes.number, PropTypes.string]),\n  /**\n   * Sets the type of space between rows added by `getRowSpacing`.\n   * @default \"margin\"\n   */\n  rowSpacingType: PropTypes.oneOf(['border', 'margin']),\n  /**\n   * Override the height/width of the Data Grid inner scrollbar.\n   */\n  scrollbarSize: PropTypes.number,\n  /**\n   * If `true`, vertical borders will be displayed between cells.\n   * @default false\n   */\n  showCellVerticalBorder: PropTypes.bool,\n  /**\n   * If `true`, vertical borders will be displayed between column header items.\n   * @default false\n   */\n  showColumnVerticalBorder: PropTypes.bool,\n  /**\n   * Overridable components props dynamically passed to the component at rendering.\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable components.\n   */\n  slots: PropTypes.object,\n  /**\n   * Sorting can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle sorting on the client-side.\n   * Set it to 'server' if you would like to handle sorting on the server-side.\n   * @default \"client\"\n   */\n  sortingMode: PropTypes.oneOf(['client', 'server']),\n  /**\n   * The order of the sorting sequence.\n   * @default ['asc', 'desc', null]\n   */\n  sortingOrder: PropTypes.arrayOf(PropTypes.oneOf(['asc', 'desc'])),\n  /**\n   * Set the sort model of the Data Grid.\n   */\n  sortModel: PropTypes.arrayOf(PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    sort: PropTypes.oneOf(['asc', 'desc'])\n  })),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * If `true`, the Data Grid will auto span the cells over the rows having the same value.\n   * @default false\n   */\n  unstable_rowSpanning: PropTypes.bool,\n  /**\n   * If `true`, the Data Grid enables column virtualization when `getRowHeight` is set to `() => 'auto'`.\n   * By default, column virtualization is disabled when dynamic row height is enabled to measure the row height correctly.\n   * For datasets with a large number of columns, this can cause performance issues.\n   * The downside of enabling this prop is that the row height will be estimated based the cells that are currently rendered, which can cause row height change when scrolling horizontally.\n   * @default false\n   */\n  virtualizeColumnsWithAutoRowHeight: PropTypes.bool\n};"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 947, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}